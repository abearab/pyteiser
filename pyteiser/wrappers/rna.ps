%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed May 27 14:25:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGGCUCUGAACACUGGAGAUGACCUUGUCACCUCACUCUUUGCUGCCAAGUUUGGCCAAGGGCUUGAGGACCAACUCGCUCAAACUAGGAGCCUCAGCCU\
) } def
/len { sequence length } bind def

/coor [
[117.84523773 358.18557739]
[129.12103271 347.65658569]
[126.33781433 332.91705322]
[123.55460358 318.17752075]
[120.77138519 303.43798828]
[117.98816681 288.69845581]
[115.20494843 273.95892334]
[101.90119934 272.03482056]
[89.83900452 266.05032349]
[80.22614288 256.58865356]
[74.03012085 244.58195496]
[71.88079071 231.21955872]
[74.00638580 217.83006287]
[80.20935822 205.74935913]
[89.88462067 196.18719482]
[102.07859802 190.10620117]
[100.21711731 175.22215271]
[98.35563660 160.33810425]
[94.33121490 153.97967529]
[96.67516327 144.96311951]
[95.27747345 130.02836609]
[93.87978363 115.09363556]
[85.31322479 107.04084015]
[84.39987946 95.31909943]
[91.61567688 86.03655243]
[90.68313599 71.06556702]
[89.75058746 56.09458542]
[78.61894226 48.32532120]
[74.11447144 35.72728729]
[77.69039917 23.03808784]
[87.80541229 14.89140892]
[87.33892059 -0.10133561]
[86.87242126 -15.09407997]
[86.40592194 -30.08682442]
[85.93942261 -45.07956696]
[75.86216736 -60.39282990]
[84.54494476 -75.55564117]
[83.61239624 -90.52662659]
[82.67985535 -105.49761200]
[81.74730682 -120.46859741]
[80.81476593 -135.43957520]
[79.88221741 -150.41056824]
[76.40447235 -156.37080383]
[76.57332611 -162.27684021]
[79.38670349 -166.33584595]
[79.38670349 -181.33584595]
[79.38670349 -196.33584595]
[79.38670349 -211.33584595]
[70.72300720 -225.25965881]
[78.68713379 -239.59509277]
[95.08628082 -239.59509277]
[103.05040741 -225.25965881]
[94.38670349 -211.33584595]
[94.38670349 -196.33584595]
[94.38670349 -181.33584595]
[94.38670349 -166.33584595]
[94.85320282 -151.34310913]
[95.78575134 -136.37213135]
[96.71829224 -121.40113831]
[97.65084076 -106.43015289]
[98.58338165 -91.45917511]
[99.51593018 -76.48818970]
[108.43381500 -68.15216827]
[109.23487854 -55.56713867]
[100.93216705 -45.54606628]
[101.39866638 -30.55332184]
[101.86516571 -15.56057739]
[102.33166504 -0.56783354]
[102.79815674 14.42491055]
[115.50843811 25.31472969]
[116.51535797 42.35775757]
[104.72157288 55.16204071]
[105.65412140 70.13302612]
[106.58666229 85.10400391]
[116.23803711 98.73474121]
[108.81452942 113.69594574]
[110.21221924 128.63067627]
[111.60990143 143.56542969]
[113.23968506 158.47662354]
[115.10116577 173.36067200]
[116.96264648 188.24472046]
[133.15666199 192.38600159]
[146.53413391 202.34732056]
[155.10556030 216.61288452]
[157.60929871 233.02937317]
[153.69715881 249.13095093]
[143.98254395 262.50973511]
[129.94447327 271.17572021]
[132.72769165 285.91525269]
[135.51091003 300.65478516]
[138.29412842 315.39428711]
[141.07734680 330.13381958]
[143.86056519 344.87335205]
[158.19937134 350.56564331]
[167.16587830 363.11975098]
[167.89891052 378.52966309]
[160.16455078 391.87820435]
[146.43080139 398.90585327]
[131.08006287 397.37011719]
[119.01069641 387.76107788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[2 93]
[3 92]
[4 91]
[5 90]
[6 89]
[7 88]
[16 81]
[17 80]
[18 79]
[20 78]
[21 77]
[22 76]
[25 74]
[26 73]
[27 72]
[31 69]
[32 68]
[33 67]
[34 66]
[35 65]
[37 62]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
