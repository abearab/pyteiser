%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.11
%%CreationDate: Thu Oct 22 19:46:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CUCGGCCUUUAAAUGCUGACUCACCUCCUCUCGGAGGAGGCGUCCUGUCUUCACGGGGGGGUCCCGGUGGCCUCCAGACGUAGCCAUUUCCUGACAUCAA\
) def
/coor [
[106.49292755 149.73802185]
[98.43167877 137.08819580]
[89.31568909 149.00032043]
[80.19969940 160.91244507]
[71.08370972 172.82456970]
[61.96772003 184.73669434]
[66.52298737 199.57006836]
[61.45760345 214.23709106]
[48.71930695 223.09799194]
[33.20623398 222.74555969]
[20.88348007 213.31532288]
[16.48939133 198.43341064]
[21.71358871 183.82218933]
[34.54726028 175.10000610]
[50.05559540 175.62071228]
[59.17158508 163.70858765]
[68.28757477 151.79646301]
[77.40356445 139.88433838]
[86.51955414 127.97220612]
[84.67246246 120.70321655]
[70.13442230 124.39715576]
[66.44071960 109.85904694]
[80.97827911 106.16522980]
[79.13118744 98.89624023]
[65.43434143 92.78098297]
[51.73749161 86.66572571]
[38.04064560 80.55047607]
[24.34379578 74.43521881]
[10.64694595 68.31996918]
[-3.04990244 62.20471191]
[-19.97797585 61.26840973]
[-23.76442337 44.74269867]
[-8.93273449 36.52945328]
[3.06535172 48.50786209]
[16.76220131 54.62311554]
[30.45904922 60.73837280]
[44.15589905 66.85362244]
[57.85274506 72.96887970]
[71.54959869 79.08413696]
[85.24644470 85.19938660]
[97.83073425 77.03632355]
[90.09343719 63.23615265]
[97.83073425 50.50888062]
[97.83073425 35.50888062]
[97.83073425 20.50888062]
[97.83073425 5.50888109]
[97.83073425 -9.49111938]
[97.83073425 -24.49111938]
[89.16703033 -38.41492081]
[97.13116455 -52.75035858]
[113.53031158 -52.75035858]
[121.49443817 -38.41492081]
[112.83073425 -24.49111938]
[112.83073425 -9.49111938]
[112.83073425 5.50888109]
[112.83073425 20.50888062]
[112.83073425 35.50888062]
[112.83073425 50.50888062]
[120.56803894 63.23615265]
[112.83073425 77.03632355]
[122.66966248 88.35867310]
[137.52296448 90.45140076]
[152.37626648 92.54412842]
[166.88252258 80.57865143]
[185.23918152 82.79415894]
[196.10586548 97.36330414]
[211.06053162 98.52855682]
[226.01519775 99.69381714]
[240.96987915 100.85907745]
[255.92454529 102.02433014]
[270.87921143 103.18959045]
[282.82501221 93.19282532]
[297.97457886 94.58759308]
[307.43136597 106.03771210]
[320.50808716 96.74370575]
[335.88723755 101.31110382]
[341.77124023 116.23618317]
[333.64639282 130.06970215]
[317.74539185 132.19976807]
[306.26611328 120.99237823]
[295.14987183 130.83946228]
[279.96710205 129.87075806]
[269.71395874 118.14426422]
[254.75929260 116.97900391]
[239.80461121 115.81374359]
[224.84994507 114.64849091]
[209.89527893 113.48323059]
[194.94059753 112.31797028]
[187.93765259 121.58448029]
[177.18766785 126.29330444]
[165.38740540 125.13407898]
[155.56066895 118.28501892]
[150.28353882 107.39743042]
[135.43023682 105.30469513]
[120.57693481 103.21196747]
[135.39819336 105.52069855]
[146.62966919 115.46322632]
[150.71914673 129.89500427]
[146.37321472 144.25164795]
[134.96638489 153.99250793]
] def
/pairs [
[2 19]
[3 18]
[4 17]
[5 16]
[6 15]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[41 60]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
[61 95]
[62 94]
[63 93]
[66 88]
[67 87]
[68 86]
[69 85]
[70 84]
[71 83]
[74 80]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
