%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.13
%%CreationDate: Wed May 27 14:10:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAGUGAAUUCUUUUUGACAAAGAGAAAUGCAGUGUAGUAUGCAGAGCUGCUGUUUUAAUGCCUAUGCAUUUACUCUUUCCUGAUUUAGGCAGAGGUGGC\
) } def
/len { sequence length } bind def

/coor [
[70.23333740 158.53546143]
[77.62916565 145.48611450]
[80.83541870 130.83277893]
[84.04167175 116.17945862]
[74.20274353 127.50180817]
[70.99110413 142.99360657]
[56.80263138 147.52532959]
[46.96370316 158.84767151]
[48.31875992 174.59376526]
[38.07897949 186.63214111]
[22.31944084 187.82063293]
[10.39000130 177.45414734]
[9.36818409 161.68293762]
[19.86021423 149.86375427]
[35.64135742 149.00874329]
[45.48028946 137.68640137]
[47.98817825 123.00444794]
[62.88039780 117.66287231]
[72.71932983 106.34053040]
[91.94645691 88.43729401]
[91.01390839 73.46630859]
[90.08136749 58.49532318]
[89.14881897 43.52434158]
[88.21627808 28.55335617]
[87.28372955 13.58237267]
[86.11847687 -1.37229812]
[84.72078705 -16.30703926]
[83.32309723 -31.24177933]
[81.92540741 -46.17651749]
[80.52771759 -61.11125946]
[79.13002777 -76.04599762]
[77.73233795 -90.98073578]
[64.09754181 -101.80364227]
[62.45237350 -118.79693604]
[73.32243347 -131.52412415]
[71.46095276 -146.40817261]
[69.59947205 -161.29222107]
[54.36686707 -167.50309753]
[44.36092758 -180.44248962]
[42.20675659 -196.56278992]
[48.39270401 -211.50309753]
[61.16366577 -221.26904297]
[58.84019089 -236.08799744]
[56.51671982 -250.90696716]
[54.19324493 -265.72592163]
[42.12796783 -276.29986572]
[43.01634598 -292.31832886]
[56.17689133 -301.49325562]
[71.51396179 -296.78646851]
[77.26226807 -281.80859375]
[69.01220703 -268.04937744]
[71.33567810 -253.23043823]
[73.65914917 -238.41148376]
[75.98262024 -223.59251404]
[89.10597992 -219.48439026]
[99.20148468 -210.04968262]
[104.23548889 -197.11003113]
[103.15983582 -183.20066833]
[96.12954712 -171.07373047]
[84.48352051 -163.15370178]
[86.34500122 -148.26965332]
[88.20648193 -133.38560486]
[99.46131897 -126.90404510]
[104.95961761 -114.92190552]
[102.46092987 -101.77819061]
[92.66707611 -92.37842560]
[94.06476593 -77.44368744]
[95.46245575 -62.50894928]
[96.86014557 -47.57420731]
[98.25783539 -32.63946915]
[99.65552521 -17.70472717]
[101.05321503 -2.76998711]
[104.87794495 3.71051621]
[102.25471497 12.64982796]
[103.18726349 27.62081146]
[104.11980438 42.59179688]
[105.05234528 57.56277847]
[105.98489380 72.53376007]
[106.91743469 87.50474548]
[114.48468018 100.45606995]
[127.06896973 108.61913300]
[139.65325928 116.78219604]
[152.23756409 124.94525909]
[168.81628418 128.49238586]
[169.99722290 145.40515137]
[154.07234192 151.22186279]
[144.07449341 137.52955627]
[131.49020386 129.36648560]
[118.90590668 121.20343018]
[106.32161713 113.04036713]
[113.45178986 126.23735809]
[120.58197021 139.43435669]
[131.29574585 149.93267822]
[136.44311523 164.02185059]
[135.02024841 178.95420837]
[127.30463409 191.81770325]
[114.80094910 200.10371399]
[99.94763184 202.19631958]
[85.64134216 197.68743896]
[74.67205048 187.45635986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 19]
[5 18]
[7 16]
[8 15]
[20 79]
[21 78]
[22 77]
[23 76]
[24 75]
[25 74]
[26 72]
[27 71]
[28 70]
[29 69]
[30 68]
[31 67]
[32 66]
[35 62]
[36 61]
[37 60]
[42 54]
[43 53]
[44 52]
[45 51]
[80 90]
[81 89]
[82 88]
[83 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
